from time import process_time 
import random
import sys
import math
import timeit
import matplotlib.pyplot as plt
val = [1000,2000,3000,5000,10000,20000,30000,40000,50000]

#Insertion Sort (With Random input values)

Execution_time_arr = []
for j in val:
    insertion_sort_arr = []
    random.seed(3)
    # Generating random numbers 
    insertion_sort_arr = random.sample(range(0,50000),j)
    start = None
    #Keeping track of the time using timeit.default_timer() function
    start = timeit.default_timer()
    print("\nGiven array:",insertion_sort_arr)
    def insertion_sort(s): 
        for i in range(1, len(s)):
            key = s[i]
            j = i - 1
            while j >= 0 and key < s[j]:
                s[j + 1] = s[j]
                j -= 1
            s[j + 1] = key
    
        print('\nThe sorted list after insertion sort: \t', s)
        print('\n')

    insertion_sort(insertion_sort_arr)
    end = None
    end = timeit.default_timer()

    Execution_time = end - start
    Execution_time_arr.append(Execution_time)
    print("Execution Time in seconds:",Execution_time)
    
print("Execution Time of each run:",Execution_time_arr)

#Plotting the graph for Insertion sort with Random input array
plt.plot(val,Execution_time_arr,label='Insertion sort (Random Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the input array for Insertion sort is already sorted

Execution_time_arr1 = []
for j in val:
    insertion_sort_arr = []
    random.seed(3)
    insertion_sort_arr = random.sample(range(0,50000),j)  
    start = None
    start = timeit.default_timer()
    #Sorting the array
    insertion_sort_arr = sorted(insertion_sort_arr)
    print("\nGiven array",insertion_sort_arr)
    def insertion_sort(s): 
        for i in range(1, len(s)):
            key = s[i]
            j = i - 1
            while j >= 0 and key < s[j]:
                s[j + 1] = s[j]
                j -= 1
            s[j + 1] = key
    
        print('\nThe sorted list after insertion sort (sorted input array): \t', s)
        print('\n')

    insertion_sort(insertion_sort_arr)
    end = None
    end = timeit.default_timer()

    Execution_time = end - start
    Execution_time_arr1.append(Execution_time)
    print("Execution Time in seconds:",Execution_time)
    
print("Execution Time for each run in seconds:",Execution_time_arr1)

#Plotting the graph for Insertion sort with already sorted input array
plt.plot(val,Execution_time_arr1,label='Insertion sort (Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the input array for Insertion sort is reversely sorted
Execution_time_arr2 = []
for j in val:
    insertion_sort_arr = []
    random.seed(3)
    insertion_sort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
     #Sorting the array in reverse order
    insertion_sort_arr = sorted(insertion_sort_arr,reverse=True)
    print("Given array",insertion_sort_arr)
    def insertion_sort(s): 
        for i in range(1, len(s)):
            key = s[i]
            j = i - 1
            while j >= 0 and key < s[j]:
                s[j + 1] = s[j]
                j -= 1
            s[j + 1] = key
    
        print('\nThe sorted list after insertion sort(Reversely Sorted Input): \t', s)
        print('\n')

    insertion_sort(insertion_sort_arr)
    end = None
    end = timeit.default_timer()
    Execution_time = end - start
    Execution_time_arr2.append(Execution_time)
    print("Execution Time in seconds:",Execution_time)
    
print("Execution Time for each run in seconds:",Execution_time_arr2)

#Plotting the graph for Insertion sort with reversely sorted input array
plt.plot(val,Execution_time_arr2,label='Insertion sort (Reversely Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison plot for Insertion Sort
plt.plot(val,Execution_time_arr,label='Insertion sort (Random Input)')
plt.plot(val,Execution_time_arr1,label='Insertion sort (Sorted Input)')
plt.plot(val,Execution_time_arr2,label='Insertion sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

# MergeSort (With Random input values)

Execution_time_arr3 = []
for j in val:
    merge_sort_arr = []
    random.seed(3)
    merge_sort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    print("\nGiven array: ",merge_sort_arr)
    def mergesort(input_array):
        if len(input_array) > 1:
            mid = math.floor(len(input_array) / 2)
            left = input_array[: mid]
            right = input_array[mid:]
            mergesort(left)
            mergesort(right)
            merge(left, right, input_array)
        return input_array

    def merge(left, right, input_array2):
        i = 0
        j = 0
        k = 0
        while i != len(left) or j != len(right):
            if j == len(right) or (i < len(left) and left[i] < right[j]):
                input_array2[k] = left[i]
                i = i + 1
            else:
                input_array2[k] = right[j]
                j = j + 1
            k = k + 1

    sorted_array = mergesort(merge_sort_arr)

    print("\nSorted array:",sorted_array)
    end = None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr3.append(Execution_time)
    print("\nExecution Time in seconds:\t",Execution_time)
print("\nExecution Time for each run in seconds:\t",Execution_time_arr3)

#Plotting the graph for Merge sort with random input array
plt.plot(val,Execution_time_arr3,label='Merge sort (Random Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array for Merge sort is already sorted
Execution_time_arr4 = []
for j in val:
    merge_sort_arr = []
    random.seed(3)
    merge_sort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    #Sorting the array
    merge_sort_arr = sorted(merge_sort_arr)
    print("\nGiven array: ",merge_sort_arr)
    def mergesort(input_array):
        if len(input_array) > 1:
            mid = math.floor(len(input_array) / 2)
            left = input_array[: mid]
            right = input_array[mid:]
            mergesort(left)
            mergesort(right)
            merge(left, right, input_array)
        return input_array

    def merge(left, right, input_array2):
        i = 0
        j = 0
        k = 0
        while i != len(left) or j != len(right):
            if j == len(right) or (i < len(left) and left[i] < right[j]):
                input_array2[k] = left[i]
                i = i + 1
            else:
                input_array2[k] = right[j]
                j = j + 1
            k = k + 1

    sorted_array = mergesort(merge_sort_arr)

    print("\nSorted array:",sorted_array)
    end = None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr4.append(Execution_time)
    print("\nExecution Time in seconds:\t",Execution_time)
print("\nExecution Time for each run in seconds:\t",Execution_time_arr4)

#Plotting the graph for Merge sort with sorted input array
plt.plot(val,Execution_time_arr4,label='Merge sort (Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array for Merge sort is reversely sorted
Execution_time_arr5 = []
for j in val:
    merge_sort_arr = []
    random.seed(3)
    merge_sort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    #Sorting the array
    merge_sort_arr = sorted(merge_sort_arr,reverse=True)
    print("\nGiven array: ",merge_sort_arr)
    def mergesort(input_array):
        if len(input_array) > 1:
            mid = math.floor(len(input_array) / 2)
            left = input_array[: mid]
            right = input_array[mid:]
            mergesort(left)
            mergesort(right)
            merge(left, right, input_array)
        return input_array

    def merge(left, right, input_array2):
        i = 0
        j = 0
        k = 0
        while i != len(left) or j != len(right):
            if j == len(right) or (i < len(left) and left[i] < right[j]):
                input_array2[k] = left[i]
                i = i + 1
            else:
                input_array2[k] = right[j]
                j = j + 1
            k = k + 1

    sorted_array = mergesort(merge_sort_arr)

    print("\nSorted array:",sorted_array)
    end = None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr5.append(Execution_time)
    print("\nExecution Time in seconds:\t",Execution_time)
print("\nExecution Time for each run in seconds:\t",Execution_time_arr5)

#Plotting the graph for Merge sort with reversely sorted input array
plt.plot(val,Execution_time_arr5,label='Merge sort (Reverse sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison plot for Merge Sort
plt.plot(val,Execution_time_arr3,label='Merge sort (Random Input)')
plt.plot(val,Execution_time_arr4,label='Merge sort (Sorted Input)')
plt.plot(val,Execution_time_arr5,label='Merge sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

# vector based heapsort 
Execution_time_arr6 = []
for j in val:
    heapsort_arr = []
    random.seed(3)
    heapsort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    print("\nGiven array: ",heapsort_arr)
    class BinHeap:
        #initializing the vector and an attribute currentSize as 0 to allow for interger division
        def __init__(self):
            self.heapList = [0]
            self.currentSize = 0

        #prelocating items far up in the tree to maintain heap property
        def HeapUp(self,i):
            while i // 2 > 0:
                if self.heapList[i] < self.heapList[i // 2]:
                    tmp = self.heapList[i // 2]
                    self.heapList[i // 2] = self.heapList[i]
                    self.heapList[i] = tmp
                i = i // 2

        # appends item to the end of the vector
        def insert(self,k):
            self.heapList.append(k)
            self.currentSize = self.currentSize + 1
            self.HeapUp(self.currentSize)

        #prelocating items far down in the tree to maintain heap property
        def HeapDown(self,i):
            while (i * 2) <= self.currentSize:
                mc = self.minChild(i)
                if self.heapList[i] > self.heapList[mc]:
                    tmp = self.heapList[i]
                    self.heapList[i] = self.heapList[mc]
                    self.heapList[mc] = tmp
                i = mc

        def minChild(self,i):
            if i * 2 + 1 > self.currentSize:
                return i * 2
            else:
                if self.heapList[i*2] < self.heapList[i*2+1]:
                    return i * 2
                else:
                    return i * 2 + 1

        def delMin(self):
            retval = self.heapList[1]
            self.heapList[1] = self.heapList[self.currentSize]
            self.currentSize = self.currentSize - 1
            self.heapList.pop()
            self.HeapDown(1)
            return retval

        def buildHeap(self,alist):
            i = len(alist) // 2
            self.currentSize = len(alist)
            self.heapList = [0] + alist[:]
            while (i > 0):
                self.HeapDown(i)
                i = i - 1

    def main():

        bh = BinHeap()
        bh.buildHeap(heapsort_arr)

        for i in range(len(heapsort_arr)):
            print(bh.delMin())

    main()
    end = None
    end=timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr6.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
     
print("\nExecution Time for each run in seconds:\t",Execution_time_arr6)


#Plotting the graph for Heap sort with random input array
plt.plot(val,Execution_time_arr6,label='Heap sort (Random Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array for heap sort is already sorted
Execution_time_arr7 = []
for j in val:
    heapsort_arr = []
    random.seed(3)
    heapsort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    #Sorting the array
    heapsort_arr = sorted(heapsort_arr)
    print("\nGiven array: ",heapsort_arr)
    class BinHeap:
        def __init__(self):
            self.heapList = [0]
            self.currentSize = 0

        def HeapUp(self,i):
            while i // 2 > 0:
                if self.heapList[i] < self.heapList[i // 2]:
                    tmp = self.heapList[i // 2]
                    self.heapList[i // 2] = self.heapList[i]
                    self.heapList[i] = tmp
                i = i // 2

        def insert(self,k):
            self.heapList.append(k)
            self.currentSize = self.currentSize + 1
            self.HeapUp(self.currentSize)

        def HeapDown(self,i):
            while (i * 2) <= self.currentSize:
                mc = self.minChild(i)
                if self.heapList[i] > self.heapList[mc]:
                    tmp = self.heapList[i]
                    self.heapList[i] = self.heapList[mc]
                    self.heapList[mc] = tmp
                i = mc

        def minChild(self,i):
            if i * 2 + 1 > self.currentSize:
                return i * 2
            else:
                if self.heapList[i*2] < self.heapList[i*2+1]:
                    return i * 2
                else:
                    return i * 2 + 1

        def delMin(self):
            retval = self.heapList[1]
            self.heapList[1] = self.heapList[self.currentSize]
            self.currentSize = self.currentSize - 1
            self.heapList.pop()
            self.HeapDown(1)
            return retval

        def buildHeap(self,alist):
            i = len(alist) // 2
            self.currentSize = len(alist)
            self.heapList = [0] + alist[:]
            while (i > 0):
                self.HeapDown(i)
                i = i - 1

    def main():

        bh = BinHeap()
        bh.buildHeap(heapsort_arr)

        for i in range(len(heapsort_arr)):
            print(bh.delMin())

    main()
    end = None
    end=timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr7.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
     
print("\nExecution Time for each run in seconds:\t",Execution_time_arr7)

#Plotting the graph for Heap sort with already sorted input array
plt.plot(val,Execution_time_arr7,label='Heap sort (Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array for heap sort is reversely sorted
Execution_time_arr8 = []
for j in val:
    heapsort_arr = []
    random.seed(3)
    heapsort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    #Sorting the array in reverse order
    heapsort_arr = sorted(heapsort_arr,reverse=True)
    print("\nGiven array: ",heapsort_arr)
    class BinHeap:
        def __init__(self):
            self.heapList = [0]
            self.currentSize = 0

        def HeapUp(self,i):
            while i // 2 > 0:
                if self.heapList[i] < self.heapList[i // 2]:
                    tmp = self.heapList[i // 2]
                    self.heapList[i // 2] = self.heapList[i]
                    self.heapList[i] = tmp
                i = i // 2

        def insert(self,k):
            self.heapList.append(k)
            self.currentSize = self.currentSize + 1
            self.HeapUp(self.currentSize)

    
        def HeapDown(self,i):
            while (i * 2) <= self.currentSize:
                mc = self.minChild(i)
                if self.heapList[i] > self.heapList[mc]:
                    tmp = self.heapList[i]
                    self.heapList[i] = self.heapList[mc]
                    self.heapList[mc] = tmp
                i = mc

        def minChild(self,i):
            if i * 2 + 1 > self.currentSize:
                return i * 2
            else:
                if self.heapList[i*2] < self.heapList[i*2+1]:
                    return i * 2
                else:
                    return i * 2 + 1


        def delMin(self):
            retval = self.heapList[1]
            self.heapList[1] = self.heapList[self.currentSize]
            self.currentSize = self.currentSize - 1
            self.heapList.pop()
            self.HeapDown(1)
            return retval

        def buildHeap(self,alist):
            i = len(alist) // 2
            self.currentSize = len(alist)
            self.heapList = [0] + alist[:]
            while (i > 0):
                self.HeapDown(i)
                i = i - 1

    def main():

        bh = BinHeap()
        bh.buildHeap(heapsort_arr)

        for i in range(len(heapsort_arr)):
            print(bh.delMin())

    main()
    end = None
    end=timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr8.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
     
print("\nExecution Time for each run in seconds:\t",Execution_time_arr8)

#Plotting the graph for Heap sort with reversely sorted input array
plt.plot(val,Execution_time_arr8,label='Heap sort (Reverse sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison plot for Heap Sort
plt.plot(val,Execution_time_arr6,label='Heap sort (Random Input)')
plt.plot(val,Execution_time_arr7,label='Heap sort (Sorted Input)')
plt.plot(val,Execution_time_arr8,label='Heap sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#In-place Quick sort
Execution_time_arr9 = []
Execution_time_arr10 = []
Execution_time_arr11 = []
for j in val:
    quicksort_arr = []
    random.seed(3)
    quicksort_arr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    print("\nGiven array: ",quicksort_arr)
    def quicksort_inplace(s, a, b):
        def swap(s, a, b):
            tmp = s[a]
            s[a] = s[b]
            s[b] = tmp
        if a >= b: return
        pivot = s[b] # last element as pivot
        left = a
        right = b - 1
        while left <= right:
            while left <= right and s[left] <= pivot:  # finding element larger than the pivot
                left += 1   
            while left <= right and s[right] >= pivot: # finding element larger than the pivot
                right -= 1  
            if left < right: 
                swap(s, left, right)
        swap(s, left, b) # putting the pivot its final place
        quicksort_inplace(s, a, left-1) 
        quicksort_inplace(s, left+1, b)
    
    quicksort_inplace(quicksort_arr, 0, len(quicksort_arr)-1)
    print ("\nSorted array", quicksort_arr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr9.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
  
    start=None
    start = timeit.default_timer()
    print("\nGiven array (Sorted input)",quicksort_arr)
    def sorted_quicksort_inplace(s, a, b):
        quicksort_inplace(quicksort_arr, 0, len(quicksort_arr)-1)
        print ("\nSorted array(Sorted input)", quicksort_arr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr10.append(Execution_time)
    print("\nExecution Time in seconds(Sorted Input):",Execution_time)
    
    start=None
    start = timeit.default_timer()
    quicksort_arr.reverse()
    print("\nGiven array (Reverse Sorted Input)",quicksort_arr)
    def reverse_sorted_quicksort_inplace(s, a, b):
        quicksort_inplace(quicksort_arr, 0, len(quicksort_arr)-1)
        print ("\nSorted array (Reverse Sorted Input)", quicksort_arr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr11.append(Execution_time)
    print("\nExecution Time in seconds(Reverse Sorted Input):",Execution_time)
        
print("\nExecution Time for each run in seconds:\t",Execution_time_arr9)
print("\nExecution Time for each run in seconds(Sorted):\t",Execution_time_arr10)
print("\nExecution Time for each run in seconds(Reverse Sorted):\t",Execution_time_arr11)

#Plotting the graph for In-place quicksort with random input array
plt.plot(val,Execution_time_arr9,label='Inplace Quick sort (Random Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Plotting the graph for In-place quicksort with already sorted input array
plt.plot(val,Execution_time_arr10,label='Inplace Quick sort (Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Plotting the graph for In-place quicksort with reversely sorted input array
plt.plot(val,Execution_time_arr11,label='Inplace Quick sort (Reversely sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison plot for In-place Quick Sort
plt.plot(val,Execution_time_arr9,label='In-place Quick sort (Random Input)')
plt.plot(val,Execution_time_arr10,label='In-place Quick sort (Sorted Input)')
plt.plot(val,Execution_time_arr11,label='In-place Quick sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Modified Quick Sort
#A method to calculate the median of three numbers using two comparisons
Execution_time_arr12 = []
for j in val:
    quicksort_marr = []
    random.seed(3)
    quicksort_marr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    print("\nGiven array: ",quicksort_marr)
    
    #finding median from the 3 numbers
    def median(a, b, c):
        if ( a - b) * (c - a) >= 0:
            return a

        elif (b - a) * (c - b) >= 0:
            return b

        else:
            return c

    #A method to partition around the median
    def partition_m(array, leftend, rightend):
        left = array[leftend]
        right = array[rightend-1]
        length = rightend - leftend
        if length % 2 == 0:
            middle = array[leftend + int(length/2) - 1]
        else:
            middle = array[leftend + int(length/2)]
  
        pivot = median(left, right, middle)

        pivotindex = array.index(pivot) 

        array[pivotindex] = array[leftend]
        array[leftend] = pivot

        i = leftend + 1
        for j in range(leftend + 1, rightend):
            if array[j] < pivot:
                temp = array[j]
                array[j] = array[i]
                array[i] = temp
                i += 1

        leftendval = array[leftend]
        array[leftend] = array[i-1]
        array[i-1] = leftendval
        return i - 1 

    def quicksort_m(array, leftindex, rightindex):
        #For small sub-problem, calling insertion sort
        if(len(array)<=15):
            insertion_sort(quicksort_marr)
        elif(len(array)>15):
             if leftindex < rightindex:
                newpivotindex = partition_m(array, leftindex, rightindex)
                quicksort_m(array, leftindex, newpivotindex)
                quicksort_m(array, newpivotindex + 1, rightindex)

    quicksort_m(quicksort_marr, 0, len(quicksort_marr))
    print("\nQuick sort",quicksort_marr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr12.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
print("\nExecution Time for each run in seconds:\t",Execution_time_arr12)

#Plotting the graph for Modified quicksort with random input array
plt.plot(val,Execution_time_arr12,label='Modified Quick sort (Random Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array is already sorted
#Modified Quick Sort
#Calculating the median of three numbers using two comparisons
Execution_time_arr13 = []
for j in val:
    quicksort_marr = []
    random.seed(3)
    quicksort_marr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    quicksort_marr=sorted(quicksort_marr)
    print("\nGiven array: ",quicksort_marr)

    def median(a, b, c):
        if ( a - b) * (c - a) >= 0:
            return a

        elif (b - a) * (c - b) >= 0:
            return b

        else:
            return c

    #A method to partition around the median
    def partition_median(array, leftend, rightend):
        left = array[leftend]
        right = array[rightend-1]
        length = rightend - leftend
        if length % 2 == 0:
            middle = array[leftend + int(length/2) - 1]
        else:
            middle = array[leftend + int(length/2)]
  
        pivot = median(left, right, middle)

        pivotindex = array.index(pivot) 

        array[pivotindex] = array[leftend]
        array[leftend] = pivot

        i = leftend + 1
        for j in range(leftend + 1, rightend):
            if array[j] < pivot:
                temp = array[j]
                array[j] = array[i]
                array[i] = temp
                i += 1

        leftendval = array[leftend]
        array[leftend] = array[i-1]
        array[i-1] = leftendval
        return i - 1 

    def quicksort_median(array, leftindex, rightindex):
        #For small sub-problem, calling insertion sort
        if(len(array)<=15):
            insertion_sort(quicksort_marr)
        elif(len(array)>15):
             if leftindex < rightindex:
                newpivotindex = partition_median(array, leftindex, rightindex)
                quicksort_median(array, leftindex, newpivotindex)
                quicksort_median(array, newpivotindex + 1, rightindex)

    quicksort_median(quicksort_marr, 0, len(quicksort_marr))
    print("\nQuick sort",quicksort_marr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr13.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
print("\nExecution Time for each run in seconds:\t",Execution_time_arr13)

#Plotting the graph for Modified quicksort with already sorted input array
plt.plot(val,Execution_time_arr13,label='Modified Quick sort (Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#If the array is reversely sorted
#Modified Quick Sort
Execution_time_arr14 = []
for j in val:
    quicksort_marr = []
    random.seed(3)
    quicksort_marr = random.sample(range(0,50000),j)
    start = None
    start = timeit.default_timer()
    quicksort_marr.reverse()
    print("\nGiven array: ",quicksort_marr)

    def median(a, b, c):
        if ( a - b) * (c - a) >= 0:
            return a

        elif (b - a) * (c - b) >= 0:
            return b

        else:
            return c

    #A method to partition around the median
    def partition_median(array, leftend, rightend):
        left = array[leftend]
        right = array[rightend-1]
        length = rightend - leftend
        if length % 2 == 0:
            middle = array[leftend + int(length/2) - 1]
        else:
            middle = array[leftend + int(length/2)]
  
        pivot = median(left, right, middle)

        pivotindex = array.index(pivot)

        array[pivotindex] = array[leftend]
        array[leftend] = pivot

        i = leftend + 1
        for j in range(leftend + 1, rightend):
            if array[j] < pivot:
                temp = array[j]
                array[j] = array[i]
                array[i] = temp
                i += 1

        leftendval = array[leftend]
        array[leftend] = array[i-1]
        array[i-1] = leftendval
        return i - 1 

    def quicksort_median(array, leftindex, rightindex):
        if(len(array)<=15):
            insertion_sort(quicksort_marr)
        elif(len(array)>15):
             if leftindex < rightindex:
                newpivotindex = partition_median(array, leftindex, rightindex)
                quicksort_median(array, leftindex, newpivotindex)
                quicksort_median(array, newpivotindex + 1, rightindex)

    quicksort_median(quicksort_marr, 0, len(quicksort_marr))
    print("\nQuick sort",quicksort_marr)
    end=None
    end = timeit.default_timer()
    Execution_time=end - start
    Execution_time_arr14.append(Execution_time)
    print("\nExecution Time in seconds:",Execution_time)
print("\nExecution Time in seconds:\t",Execution_time_arr14)

#Plotting the graph for Modified quicksort with reversely sorted input array
plt.plot(val,Execution_time_arr14,label='Modified Quick sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison plot for Modified Quick Sort
plt.plot(val,Execution_time_arr12,label='Modified Quick sort (Random Input)')
plt.plot(val,Execution_time_arr13,label='Modified Quick sort (Sorted Input)')
plt.plot(val,Execution_time_arr14,label='Modified Quick sort (Reverse Sorted Input)')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison of all sorting algorithms for Random Input
plt.plot(val,Execution_time_arr,label='Insertion sort')
plt.plot(val,Execution_time_arr3,label='Merge Sort')
plt.plot(val,Execution_time_arr6,label='Heap Sort')
plt.plot(val,Execution_time_arr9,label='In-place Quick Sort')
plt.plot(val,Execution_time_arr12,label='Modified Quick sort')
plt.title('Comparison of all sorting algorithms for Random Input Values')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison of all sorting algorithms for Sorted Input
plt.plot(val,Execution_time_arr1,label='Insertion sort')
plt.plot(val,Execution_time_arr4,label='Merge Sort')
plt.plot(val,Execution_time_arr7,label='Heap Sort')
plt.plot(val,Execution_time_arr10,label='In-place Quick Sort')
plt.plot(val,Execution_time_arr13,label='Modified Quick sort')
plt.title('Comparison of all sorting algorithms for Sorted Input Values')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()

#Comparison of all sorting algorithms for Reversely Sorted Input
plt.plot(val,Execution_time_arr2,label='Insertion sort')
plt.plot(val,Execution_time_arr5,label='Merge Sort')
plt.plot(val,Execution_time_arr8,label='Heap Sort')
plt.plot(val,Execution_time_arr11,label='In-place Quick Sort')
plt.plot(val,Execution_time_arr14,label='Modified Quick sort')
plt.title('Comparison of all sorting algorithms for Reversely Input Values')
plt.xlabel('Input values')
plt.ylabel('Execution time(in seconds)')
plt.legend()
plt.show()